// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: game.proto
#ifndef GRPC_game_2eproto__INCLUDED
#define GRPC_game_2eproto__INCLUDED

#include "game.pb.h"

#include <functional>
#include <grpc/impl/codegen/port_platform.h>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace game {

class Network final {
 public:
  static constexpr char const* service_full_name() {
    return "game.Network";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status Register(::grpc::ClientContext* context, const ::game::Void& request, ::game::OrderInfo* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::game::OrderInfo>> AsyncRegister(::grpc::ClientContext* context, const ::game::Void& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::game::OrderInfo>>(AsyncRegisterRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::game::OrderInfo>> PrepareAsyncRegister(::grpc::ClientContext* context, const ::game::Void& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::game::OrderInfo>>(PrepareAsyncRegisterRaw(context, request, cq));
    }
    virtual ::grpc::Status SendEvent(::grpc::ClientContext* context, const ::game::Event& request, ::game::Void* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::game::Void>> AsyncSendEvent(::grpc::ClientContext* context, const ::game::Event& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::game::Void>>(AsyncSendEventRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::game::Void>> PrepareAsyncSendEvent(::grpc::ClientContext* context, const ::game::Event& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::game::Void>>(PrepareAsyncSendEventRaw(context, request, cq));
    }
    virtual ::grpc::Status GetEvent(::grpc::ClientContext* context, const ::game::Player& request, ::game::Event* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::game::Event>> AsyncGetEvent(::grpc::ClientContext* context, const ::game::Player& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::game::Event>>(AsyncGetEventRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::game::Event>> PrepareAsyncGetEvent(::grpc::ClientContext* context, const ::game::Player& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::game::Event>>(PrepareAsyncGetEventRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      virtual void Register(::grpc::ClientContext* context, const ::game::Void* request, ::game::OrderInfo* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Register(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::game::OrderInfo* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void Register(::grpc::ClientContext* context, const ::game::Void* request, ::game::OrderInfo* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void Register(::grpc::ClientContext* context, const ::game::Void* request, ::game::OrderInfo* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void Register(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::game::OrderInfo* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void Register(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::game::OrderInfo* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void SendEvent(::grpc::ClientContext* context, const ::game::Event* request, ::game::Void* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SendEvent(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::game::Void* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void SendEvent(::grpc::ClientContext* context, const ::game::Event* request, ::game::Void* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void SendEvent(::grpc::ClientContext* context, const ::game::Event* request, ::game::Void* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void SendEvent(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::game::Void* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void SendEvent(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::game::Void* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void GetEvent(::grpc::ClientContext* context, const ::game::Player* request, ::game::Event* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetEvent(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::game::Event* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void GetEvent(::grpc::ClientContext* context, const ::game::Player* request, ::game::Event* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void GetEvent(::grpc::ClientContext* context, const ::game::Player* request, ::game::Event* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void GetEvent(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::game::Event* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void GetEvent(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::game::Event* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
    };
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    typedef class experimental_async_interface async_interface;
    #endif
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    async_interface* async() { return experimental_async(); }
    #endif
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::game::OrderInfo>* AsyncRegisterRaw(::grpc::ClientContext* context, const ::game::Void& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::game::OrderInfo>* PrepareAsyncRegisterRaw(::grpc::ClientContext* context, const ::game::Void& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::game::Void>* AsyncSendEventRaw(::grpc::ClientContext* context, const ::game::Event& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::game::Void>* PrepareAsyncSendEventRaw(::grpc::ClientContext* context, const ::game::Event& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::game::Event>* AsyncGetEventRaw(::grpc::ClientContext* context, const ::game::Player& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::game::Event>* PrepareAsyncGetEventRaw(::grpc::ClientContext* context, const ::game::Player& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status Register(::grpc::ClientContext* context, const ::game::Void& request, ::game::OrderInfo* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::game::OrderInfo>> AsyncRegister(::grpc::ClientContext* context, const ::game::Void& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::game::OrderInfo>>(AsyncRegisterRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::game::OrderInfo>> PrepareAsyncRegister(::grpc::ClientContext* context, const ::game::Void& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::game::OrderInfo>>(PrepareAsyncRegisterRaw(context, request, cq));
    }
    ::grpc::Status SendEvent(::grpc::ClientContext* context, const ::game::Event& request, ::game::Void* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::game::Void>> AsyncSendEvent(::grpc::ClientContext* context, const ::game::Event& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::game::Void>>(AsyncSendEventRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::game::Void>> PrepareAsyncSendEvent(::grpc::ClientContext* context, const ::game::Event& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::game::Void>>(PrepareAsyncSendEventRaw(context, request, cq));
    }
    ::grpc::Status GetEvent(::grpc::ClientContext* context, const ::game::Player& request, ::game::Event* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::game::Event>> AsyncGetEvent(::grpc::ClientContext* context, const ::game::Player& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::game::Event>>(AsyncGetEventRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::game::Event>> PrepareAsyncGetEvent(::grpc::ClientContext* context, const ::game::Player& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::game::Event>>(PrepareAsyncGetEventRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void Register(::grpc::ClientContext* context, const ::game::Void* request, ::game::OrderInfo* response, std::function<void(::grpc::Status)>) override;
      void Register(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::game::OrderInfo* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void Register(::grpc::ClientContext* context, const ::game::Void* request, ::game::OrderInfo* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void Register(::grpc::ClientContext* context, const ::game::Void* request, ::game::OrderInfo* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void Register(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::game::OrderInfo* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void Register(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::game::OrderInfo* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void SendEvent(::grpc::ClientContext* context, const ::game::Event* request, ::game::Void* response, std::function<void(::grpc::Status)>) override;
      void SendEvent(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::game::Void* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void SendEvent(::grpc::ClientContext* context, const ::game::Event* request, ::game::Void* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void SendEvent(::grpc::ClientContext* context, const ::game::Event* request, ::game::Void* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void SendEvent(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::game::Void* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void SendEvent(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::game::Void* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void GetEvent(::grpc::ClientContext* context, const ::game::Player* request, ::game::Event* response, std::function<void(::grpc::Status)>) override;
      void GetEvent(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::game::Event* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void GetEvent(::grpc::ClientContext* context, const ::game::Player* request, ::game::Event* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void GetEvent(::grpc::ClientContext* context, const ::game::Player* request, ::game::Event* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void GetEvent(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::game::Event* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void GetEvent(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::game::Event* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::game::OrderInfo>* AsyncRegisterRaw(::grpc::ClientContext* context, const ::game::Void& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::game::OrderInfo>* PrepareAsyncRegisterRaw(::grpc::ClientContext* context, const ::game::Void& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::game::Void>* AsyncSendEventRaw(::grpc::ClientContext* context, const ::game::Event& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::game::Void>* PrepareAsyncSendEventRaw(::grpc::ClientContext* context, const ::game::Event& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::game::Event>* AsyncGetEventRaw(::grpc::ClientContext* context, const ::game::Player& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::game::Event>* PrepareAsyncGetEventRaw(::grpc::ClientContext* context, const ::game::Player& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_Register_;
    const ::grpc::internal::RpcMethod rpcmethod_SendEvent_;
    const ::grpc::internal::RpcMethod rpcmethod_GetEvent_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status Register(::grpc::ServerContext* context, const ::game::Void* request, ::game::OrderInfo* response);
    virtual ::grpc::Status SendEvent(::grpc::ServerContext* context, const ::game::Event* request, ::game::Void* response);
    virtual ::grpc::Status GetEvent(::grpc::ServerContext* context, const ::game::Player* request, ::game::Event* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_Register : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Register() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_Register() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Register(::grpc::ServerContext* /*context*/, const ::game::Void* /*request*/, ::game::OrderInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRegister(::grpc::ServerContext* context, ::game::Void* request, ::grpc::ServerAsyncResponseWriter< ::game::OrderInfo>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SendEvent : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SendEvent() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_SendEvent() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendEvent(::grpc::ServerContext* /*context*/, const ::game::Event* /*request*/, ::game::Void* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSendEvent(::grpc::ServerContext* context, ::game::Event* request, ::grpc::ServerAsyncResponseWriter< ::game::Void>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetEvent : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetEvent() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_GetEvent() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetEvent(::grpc::ServerContext* /*context*/, const ::game::Player* /*request*/, ::game::Event* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetEvent(::grpc::ServerContext* context, ::game::Player* request, ::grpc::ServerAsyncResponseWriter< ::game::Event>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_Register<WithAsyncMethod_SendEvent<WithAsyncMethod_GetEvent<Service > > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_Register : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_Register() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(0,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::game::Void, ::game::OrderInfo>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::game::Void* request, ::game::OrderInfo* response) { return this->Register(context, request, response); }));}
    void SetMessageAllocatorFor_Register(
        ::grpc::experimental::MessageAllocator< ::game::Void, ::game::OrderInfo>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(0);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::game::Void, ::game::OrderInfo>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_Register() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Register(::grpc::ServerContext* /*context*/, const ::game::Void* /*request*/, ::game::OrderInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* Register(
      ::grpc::CallbackServerContext* /*context*/, const ::game::Void* /*request*/, ::game::OrderInfo* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* Register(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::game::Void* /*request*/, ::game::OrderInfo* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_SendEvent : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_SendEvent() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(1,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::game::Event, ::game::Void>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::game::Event* request, ::game::Void* response) { return this->SendEvent(context, request, response); }));}
    void SetMessageAllocatorFor_SendEvent(
        ::grpc::experimental::MessageAllocator< ::game::Event, ::game::Void>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(1);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::game::Event, ::game::Void>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_SendEvent() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendEvent(::grpc::ServerContext* /*context*/, const ::game::Event* /*request*/, ::game::Void* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* SendEvent(
      ::grpc::CallbackServerContext* /*context*/, const ::game::Event* /*request*/, ::game::Void* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* SendEvent(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::game::Event* /*request*/, ::game::Void* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetEvent : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_GetEvent() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(2,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::game::Player, ::game::Event>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::game::Player* request, ::game::Event* response) { return this->GetEvent(context, request, response); }));}
    void SetMessageAllocatorFor_GetEvent(
        ::grpc::experimental::MessageAllocator< ::game::Player, ::game::Event>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(2);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::game::Player, ::game::Event>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_GetEvent() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetEvent(::grpc::ServerContext* /*context*/, const ::game::Player* /*request*/, ::game::Event* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetEvent(
      ::grpc::CallbackServerContext* /*context*/, const ::game::Player* /*request*/, ::game::Event* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetEvent(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::game::Player* /*request*/, ::game::Event* /*response*/)
    #endif
      { return nullptr; }
  };
  #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
  typedef ExperimentalWithCallbackMethod_Register<ExperimentalWithCallbackMethod_SendEvent<ExperimentalWithCallbackMethod_GetEvent<Service > > > CallbackService;
  #endif

  typedef ExperimentalWithCallbackMethod_Register<ExperimentalWithCallbackMethod_SendEvent<ExperimentalWithCallbackMethod_GetEvent<Service > > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_Register : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Register() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_Register() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Register(::grpc::ServerContext* /*context*/, const ::game::Void* /*request*/, ::game::OrderInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SendEvent : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SendEvent() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_SendEvent() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendEvent(::grpc::ServerContext* /*context*/, const ::game::Event* /*request*/, ::game::Void* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetEvent : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetEvent() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_GetEvent() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetEvent(::grpc::ServerContext* /*context*/, const ::game::Player* /*request*/, ::game::Event* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_Register : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Register() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_Register() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Register(::grpc::ServerContext* /*context*/, const ::game::Void* /*request*/, ::game::OrderInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRegister(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SendEvent : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SendEvent() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_SendEvent() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendEvent(::grpc::ServerContext* /*context*/, const ::game::Event* /*request*/, ::game::Void* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSendEvent(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetEvent : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetEvent() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_GetEvent() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetEvent(::grpc::ServerContext* /*context*/, const ::game::Player* /*request*/, ::game::Event* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetEvent(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_Register : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_Register() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(0,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Register(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_Register() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Register(::grpc::ServerContext* /*context*/, const ::game::Void* /*request*/, ::game::OrderInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* Register(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* Register(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_SendEvent : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_SendEvent() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(1,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SendEvent(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_SendEvent() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendEvent(::grpc::ServerContext* /*context*/, const ::game::Event* /*request*/, ::game::Void* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* SendEvent(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* SendEvent(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetEvent : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_GetEvent() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(2,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetEvent(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_GetEvent() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetEvent(::grpc::ServerContext* /*context*/, const ::game::Player* /*request*/, ::game::Event* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetEvent(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetEvent(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Register : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Register() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler< ::game::Void, ::game::OrderInfo>(std::bind(&WithStreamedUnaryMethod_Register<BaseClass>::StreamedRegister, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_Register() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Register(::grpc::ServerContext* /*context*/, const ::game::Void* /*request*/, ::game::OrderInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedRegister(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::game::Void,::game::OrderInfo>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SendEvent : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SendEvent() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler< ::game::Event, ::game::Void>(std::bind(&WithStreamedUnaryMethod_SendEvent<BaseClass>::StreamedSendEvent, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_SendEvent() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SendEvent(::grpc::ServerContext* /*context*/, const ::game::Event* /*request*/, ::game::Void* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSendEvent(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::game::Event,::game::Void>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetEvent : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetEvent() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler< ::game::Player, ::game::Event>(std::bind(&WithStreamedUnaryMethod_GetEvent<BaseClass>::StreamedGetEvent, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetEvent() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetEvent(::grpc::ServerContext* /*context*/, const ::game::Player* /*request*/, ::game::Event* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetEvent(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::game::Player,::game::Event>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_Register<WithStreamedUnaryMethod_SendEvent<WithStreamedUnaryMethod_GetEvent<Service > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_Register<WithStreamedUnaryMethod_SendEvent<WithStreamedUnaryMethod_GetEvent<Service > > > StreamedService;
};

}  // namespace game


#endif  // GRPC_game_2eproto__INCLUDED
